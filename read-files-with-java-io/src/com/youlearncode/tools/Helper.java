package com.youlearncode.tools;import com.youlearncode.bytes.streams.FileStream;import com.youlearncode.entities.Person;import com.youlearncode.exceptions.InputStreamException;import java.io.*;import java.nio.charset.StandardCharsets;import java.nio.file.Files;import java.util.ArrayList;import java.util.List;public class Helper {  public static File getTextFilePath() { return new File("resources/text_file.txt"); }  public static File getTextFilePart1Path() { return new File("resources/text_part1.txt"); }  public static File getTextFilePart2Path() { return new File("resources/text_part2.txt"); }  public static File getTextFilePart3Path() { return new File("resources/text_part3.txt"); }  public static File getEncryptedFilePath() { return new File("resources/encrypted_file.txt"); }  public static File getObjectFilePath() { return new File("resources/person.dat"); }  public static File getDataFilePath() { return new File("resources/person.bin"); }  public static File getGlobalTextFilePath() { return new File("resources/text_file_global.txt"); }  public static File getGlobalDataFilePath() { return new File("resources/global_bytes.dat"); }    private static String text = """  Note that Java is a robust OO programming language.  Observe que Java é uma linguagem de programação OO robusta.  Σημείωσε οτι η Java είναι μια ισχύρη αντικειμενοστρεφής γλώσσα προγραμματισμού.  """;    public static String getText() { return text; }    public static byte[] getByteArray(File file) {    try (InputStream in = new FileInputStream(file)) {      return in.readAllBytes();    } catch (IOException e) { e.printStackTrace(); }    throw new InputStreamException("Error reading bytes from Input Stream!");  }    public static boolean saveEncryptedInputStream(byte[] buf, File path) {    try (OutputStream out = new FileOutputStream(path)) {      out.write(buf);      out.flush();      return true;    } catch (IOException e) { e.printStackTrace(); }    return false;  }    public static boolean saveObjectToFile(Person person) {    try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(getObjectFilePath()))) {      out.writeObject(person);      out.flush();      return true;    } catch (IOException e) { e.printStackTrace(); }    return false;  }    public static boolean saveDataToFile(Person obj) {    try (DataOutputStream out = new DataOutputStream(new FileOutputStream(Helper.getDataFilePath()))) {      out.writeUTF(obj.getName()); // Note that we saved name first.      out.writeInt(obj.getAge()); // Also note that we must use a different method each primitive or String.      return true;    } catch (IOException e) {      e.printStackTrace();    }    return false;  }    private static List<String> getLines() {    try {      return Files.readAllLines(Helper.getGlobalTextFilePath().toPath(), StandardCharsets.UTF_8);    } catch (IOException e) { e.printStackTrace(); }    return new ArrayList<>();  }    public static boolean saveBytesToFile() {    try (OutputStream out = new FileOutputStream(Helper.getGlobalDataFilePath())) {      byte[] bytes;      for (var line : getLines())        for (int i = 0; i < line.length(); i++) {          char c = line.charAt(i);          bytes = String.valueOf(c).getBytes(StandardCharsets.UTF_8);          out.write(bytes);        }      return true;    } catch (IOException e) { e.printStackTrace(); }    return false;  }}